name: Sync GitHub Issues & PRs with Trello

on:
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, edited, ready_for_review]

jobs:
  sync_with_trello:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Verify Secrets
        env:
          TRELLO_API_KEY: ${{ secrets.TRELLO_API_KEY }}
          TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
        run: |
          echo "TRELLO_API_KEY is set: ${#TRELLO_API_KEY} characters"
          echo "TRELLO_TOKEN is set: ${#TRELLO_TOKEN} characters"

      - name: Call Trello API to Create or Move Cards
        env:
          TRELLO_API_KEY: ${{ secrets.TRELLO_API_KEY }}
          TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
          BOARD_ID: "NbN9o1PX"
          BACKLOG_LIST_ID: "67e85a40c3cf1d66b18be19a"
          READY_LIST_ID: "67e8581d93f6ede88f3eb055"
          IN_PROGRESS_LIST_ID: "67e85e230f4199ea09bc38fb"
          IN_REVIEW_LIST_ID: "67ed87a8705bc0ac3bc0d0ce"
          DONE_LIST_ID: "67e8581d93f6ede88f3eb056"
        run: |
          # Determinar si es issue o PR
          if [[ "${{ github.event.issue }}" != "" ]]; then
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
            NUMBER="${{ github.event.issue.number }}"
            STATE="${{ github.event.issue.state }}"
            ACTION="${{ github.event.action }}"
          else
            TITLE="${{ github.event.pull_request.title }}"
            BODY="${{ github.event.pull_request.body }}"
            NUMBER="${{ github.event.pull_request.number }}"
            
            # Manejar estados especiales de PRs
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              STATE="merged"
            else
              STATE="${{ github.event.pull_request.state }}"
            fi
            ACTION="${{ github.event.action }}"
          fi

          # Codificar para URL
          CARD_NAME="GitHub #${NUMBER}: $(echo "$TITLE" | jq -sRr @uri)"
          CARD_DESC="$(echo "$BODY" | jq -sRr @uri)"

          # Debugging output
          echo "TITLE: $TITLE"
          echo "NUMBER: $NUMBER"
          echo "STATE: $STATE"
          echo "ACTION: $ACTION"
          echo "CARD_NAME: $CARD_NAME"

          # Validar credenciales
          if [[ -z "$TRELLO_API_KEY" || -z "$TRELLO_TOKEN" || -z "$BOARD_ID" ]]; then
            echo "❌ Missing required environment variables"
            exit 1
          fi

          # Buscar tarjeta existente
          CARD_ID=$(curl -s "https://api.trello.com/1/boards/$BOARD_ID/cards?key=$TRELLO_API_KEY&token=$TRELLO_TOKEN" \
            | jq -r --arg name "$CARD_NAME" '.[] | select(.name==$name) | .id')

          # Determinar acción
          if [[ "$ACTION" == "opened" && -z "$CARD_ID" ]]; then
            # Crear nueva tarjeta en BACKLOG
            echo "Creating new card in Backlog"
            curl -X POST -s "https://api.trello.com/1/cards?key=$TRELLO_API_KEY&token=$TRELLO_TOKEN" \
              -d "idList=$BACKLOG_LIST_ID" \
              -d "name=$CARD_NAME" \
              -d "desc=$CARD_DESC"
          elif [[ -n "$CARD_ID" ]]; then
            # Mover tarjeta existente
            case "$STATE" in
              "open") LIST_ID=$READY_LIST_ID ;;
              "in_progress"|"ready_for_review") LIST_ID=$IN_PROGRESS_LIST_ID ;;
              "review_requested") LIST_ID=$IN_REVIEW_LIST_ID ;;
              "closed"|"merged") LIST_ID=$DONE_LIST_ID ;;
              *) LIST_ID="" ;;
            esac

            if [[ -n "$LIST_ID" ]]; then
              echo "Moving card $CARD_ID to list $LIST_ID"
              curl -X PUT -s "https://api.trello.com/1/cards/$CARD_ID?key=$TRELLO_API_KEY&token=$TRELLO_TOKEN" \
                -d "idList=$LIST_ID"
            fi
          fi
